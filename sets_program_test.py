## Этот файл предназначен для тестирования sets_program.py
import unittest

from sets_program import PowerSet

class MyTests(unittest.TestCase):

    def test1(self): # возможность добавления отсутствующего элемента и невозможность добавления присутствующего в множестве элемента с помощью put()
        x = PowerSet()
        x.put('13')
        self.assertEqual(x.remove('13'), True)

    def test2(self): # возможность добавления отсутствующего элемента и невозможность добавления присутствующего в множестве элемента с помощью put()
        x = PowerSet()
        x.put('13')
        x.put('13')
        self.assertEqual(x.remove('13'), True)
        self.assertEqual(x.remove('13'), False)

    def test3(self): # возможность добавления отсутствующего элемента и невозможность добавления присутствующего в множестве элемента с помощью put()
        x = PowerSet()
        x.put('1300')
        x.put('1400')
        x.put('1500')
        x.put('1500')
        self.assertEqual(x.remove('1300'), True)
        self.assertEqual(x.remove('1400'), True)
        self.assertEqual(x.remove('1500'), True)
        self.assertEqual(x.remove('1500'), False)

    def test4(self): # удаление элемента с помощью remove()
        x = PowerSet()
        x.put('1300')
        x.put('1400')
        x.put('1500')
        self.assertEqual(x.remove('1300'), True)
        self.assertEqual(x.get('1300'), False)

    def test5(self): # удаление элемента с помощью remove()
        x = PowerSet()
        x.put('13')
        x.put('14')
        x.put('15')
        self.assertEqual(x.remove('15'), True)
        self.assertEqual(x.get('15'), False)

        self.assertEqual(x.remove('14'), True)
        self.assertEqual(x.get('14'), False)

        self.assertEqual(x.remove('13'), True)
        self.assertEqual(x.get('13'), False)

    def test6(self): # пересечение множеств intersection(), чтобы в результате получались как пустое, так и непустое множества
        x = PowerSet()
        x.put('1300')
        x.put('1400')
        x.put('1500')
        y = PowerSet()
        y.put('1400')
        y.put('1500')
        y.put('1600')
        mn = x.intersection(y)
        self.assertEqual(mn.get('1300'), False)
        self.assertEqual(mn.get('1400'), True)
        self.assertEqual(mn.get('1500'), True)
        self.assertEqual(mn.get('1600'), False)
        self.assertEqual(mn.get(None), False)

    def test7(self): # пересечение множеств intersection(), чтобы в результате получались как пустое, так и непустое множества
        x = PowerSet()
        x.put('100')
        x.put('210')
        x.put('220')
        y = PowerSet()
        y.put('310')
        y.put('320')
        y.put('100') 
        mn = x.intersection(y)
        self.assertEqual(mn.get('100'), True)
        self.assertEqual(mn.get('210'), False)
        self.assertEqual(mn.get('220'), False)
        self.assertEqual(mn.get('310'), False)
        self.assertEqual(mn.get('320'), False)
        self.assertEqual(mn.get(None), False)

    def test8(self): # пересечение множеств intersection(), чтобы в результате получались как пустое, так и непустое множества
        x = PowerSet()
        x.put('150000')
        x.put('140000')
        x.put('130000')
        y = PowerSet()
        y.put('130000')
        y.put('140000')
        y.put('150000')
        mn = x.intersection(y)
        self.assertEqual(mn.get('130000'), True)
        self.assertEqual(mn.get('140000'), True)
        self.assertEqual(mn.get('150000'), True)
        self.assertEqual(mn.get(None), False)

    def test9(self): # пересечение множеств intersection(), чтобы в результате получались как пустое, так и непустое множества
        x = PowerSet()
        x.put('11')
        x.put('12')
        x.put('13')
        y = PowerSet()
        y.put('21')
        y.put('22')
        y.put('23')
        self.assertEqual(x.intersection(y), None)

    def test10(self): # пересечение множеств intersection(), чтобы в результате получались как пустое, так и непустое множества
        x = PowerSet()
        x.put('11')
        x.put('12')
        x.put('13')
        y = PowerSet()
        self.assertEqual(x.intersection(y), None)

    def test11(self): # пересечение множеств intersection(), чтобы в результате получались как пустое, так и непустое множества
        x = PowerSet()
        y = PowerSet()
        y.put('21')
        y.put('22')
        y.put('23')
        self.assertEqual(x.intersection(y), None)


    def test12(self): # объединение union(), когда оба параметра непустые, и когда один из параметров -- пустое множество
        x = PowerSet()
        x.put('11000')
        x.put('12000')
        x.put('13000')
        y = PowerSet()
        y.put('21000')
        y.put('22000')
        y.put('23000')
        mn = x.union(y)
        self.assertEqual(mn.get('11000'), True)
        self.assertEqual(mn.get('12000'), True)
        self.assertEqual(mn.get('13000'), True)
        self.assertEqual(mn.get('21000'), True)
        self.assertEqual(mn.get('22000'), True)
        self.assertEqual(mn.get('23000'), True)
        self.assertEqual(mn.get(None), False)

    def test13(self): # объединение union(), когда оба параметра непустые, и когда один из параметров -- пустое множество
        x = PowerSet()
        x.put('11000')
        x.put('12000')
        x.put('13000')
        y = PowerSet()
        mn = x.union(y)
        self.assertEqual(mn.get('11000'), True)
        self.assertEqual(mn.get('12000'), True)
        self.assertEqual(mn.get('13000'), True)
        self.assertEqual(mn.get(None), False)

    def test14(self): # объединение union(), когда оба параметра непустые, и когда один из параметров -- пустое множество
        x = PowerSet()
        y = PowerSet()
        y.put('11')
        y.put('12')
        y.put('13')
        mn = x.union(y)
        self.assertEqual(mn.get('11'), True)
        self.assertEqual(mn.get('12'), True)
        self.assertEqual(mn.get('13'), True)
        self.assertEqual(mn.get(None), False)

    def test15(self): # разница difference(), чтобы в результате получались как пустое, так и непустое множества
        x = PowerSet()
        x.put('110000')
        x.put('120000')
        x.put('130000')
        y = PowerSet()
        y.put('110000')
        mn = x.difference(y)
        self.assertEqual(mn.get('110000'), False)
        self.assertEqual(mn.get('120000'), True)
        self.assertEqual(mn.get('130000'), True)
        self.assertEqual(mn.get(None), False)

    def test16(self): # разница difference(), чтобы в результате получались как пустое, так и непустое множества
        x = PowerSet()
        x.put('100000')
        x.put('200000')
        x.put('300000')
        y = PowerSet()
        y.put('100000')
        y.put('200000')
        mn = x.difference(y)
        self.assertEqual(mn.get('100000'), False)
        self.assertEqual(mn.get('200000'), False)
        self.assertEqual(mn.get('300000'), True)
        self.assertEqual(mn.get(None), False)

    def test17(self): # разница difference(), чтобы в результате получались как пустое, так и непустое множества
        x = PowerSet()
        x.put('110000')
        x.put('120000')
        x.put('130000')
        y = PowerSet()
        y.put('110000')
        mn = x.difference(y)
        self.assertEqual(mn.get('110000'), False)
        self.assertEqual(mn.get('120000'), True)
        self.assertEqual(mn.get('130000'), True)
        self.assertEqual(mn.get(None), False)

    def test18(self): # разница difference(), чтобы в результате получались как пустое, так и непустое множества
        x = PowerSet()
        x.put('11')
        x.put('12')
        x.put('13')
        y = PowerSet()
        y.put('11')
        y.put('12')
        y.put('13')
        self.assertEqual(x.difference(y), None)

    def test19(self): # разница difference(), чтобы в результате получались как пустое, так и непустое множества
        x = PowerSet()
        x.put('11')
        x.put('12')
        x.put('13')
        y = PowerSet()
        mn = x.difference(y)
        self.assertEqual(mn.get('11'), True)
        self.assertEqual(mn.get('12'), True)
        self.assertEqual(mn.get('13'), True)
        self.assertEqual(mn.get(None), False)

    def test20(self): # подмножество issubset()
        x = PowerSet()
        x.put('11')
        x.put('12')
        x.put('13')
        y = PowerSet()
        y.put('11')
        y.put('12')
        y.put('13')
        self.assertEqual(x.issubset(y), True)

    def test21(self): # подмножество issubset()
        x = PowerSet()
        x.put('11')
        x.put('12')
        x.put('13')
        y = PowerSet()
        y.put('11')
        y.put('12')
        y.put('13')
        y.put('14')
        self.assertEqual(x.issubset(y), False)

    def test22(self): # подмножество issubset()
        x = PowerSet()
        x.put('11')
        x.put('12')
        x.put('13')
        x.put('14')
        y = PowerSet()
        y.put('11')
        y.put('12')
        y.put('13')
        self.assertEqual(x.issubset(y), True)

    def test23(self): # подмножество issubset()
        x = PowerSet()
        x.put('11')
        x.put('12')
        x.put('13')
        x.put('14')
        y = PowerSet()
        y.put('11')
        self.assertEqual(x.issubset(y), True)

    def test24(self): # подмножество issubset()
        x = PowerSet()
        x.put('11')
        y = PowerSet()
        y.put('11')
        self.assertEqual(x.issubset(y), True)


if __name__ == '__main__':
    unittest.main()